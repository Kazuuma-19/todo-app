plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id("com.diffplug.spotless") version "7.0.3"
    id("checkstyle")
    id 'jacoco'
    id "org.sonarqube" version "6.2.0.5505"
    id "io.sentry.jvm.gradle" version "5.7.0"
}

spotless {
    java {
        googleJavaFormat()
    }
}

checkstyle {
    toolVersion = "10.23.1"
    config = resources.text.fromFile("config/checkstyle/google_checks.xml")
}

sonar {
    properties {
        property "sonar.projectName", "Todo App Backend"
        property "sonar.projectKey", "kazuuma-19_todo-app-backend"
        property "sonar.organization", "kazuuma-19"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

sentry {
    // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
    // This enables source context, allowing you to see your source
    // code as part of your stack traces in Sentry.
    includeSourceContext = true

    org = "kazuuma"
    projectName = "todo-app-backend"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// jacoco settings
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    // testログをターミナルに出力
    testLogging {
        exceptionFormat = "full" // 例外を詳しく表示
        events "passed", "skipped", "failed" // 出力したいイベントを指定
    }
}

jacoco {
    toolVersion = "0.8.13"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    implementation 'io.sentry:sentry-logback:8.13.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
